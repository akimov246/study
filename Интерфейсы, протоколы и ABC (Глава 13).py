'''
Хотите понять, что делает тип в Python, - узнайте, какие методы он предоставляет.

Есть 4 способа способа определения и использования интерфейсов:
> Утиная типизация
> Гусиная типизация
> Статическая типизация
> Статическая утиная тпиизация
'''

# Два вида протоколов
class Vowels:
    def __getitem__(self, i):
        return 'AEIOU'[i]

'''
Реализации метода __getitem__ достаточно для получения элементов по индексу, а также поддержки итерирования и оператора in.
Специальный метод __getitem__ - ключ к протоколу последовательности.
'''

from dataclasses import dataclass

@dataclass
class Card:
    rank: str
    suit: str

class FrenchDeck:
    ranks = [str(n) for n in range(2, 11)] + list('JQKA')
    suits = 'spades diamonds clubs hearts'.split()

    def __init__(self):
        self._cards = [Card(rank, suit) for suit in self.suits
                                        for rank in self.ranks]

    def __len__(self):
        return len(self._cards)

    def __getitem__(self, position):
        return self._cards[position]

# Партизанское латание как средство реализации протокола во время выполнения
from random import shuffle

deck = FrenchDeck()

def set_card(deck, position, card):
    deck._cards[position] = card

FrenchDeck.__setitem__ = set_card
shuffle(deck)
print(deck[:5])

# Защитное программирование и принцип быстрого отказа
'''
Защитное программирование - набор практических навыков, повышающих безопасность при столкновении с беспечными программистами.

Многие ошибки можно отловить только во время выполнения, даже в статически типизированных языках.
В динамически типизированном языке принцип быстрого отказа - прекрасный совет по созданию более безопасных и удобных
для сопровождения программ. Быстрый отказ означает, что нужно возбудить исключение как можно раньше, например
отвергать недопустимые аргументы в самом начале тела функции.
'''

# Гусиная типизация
'''
Гусиная типизация - это подход к проверке типов во время выполнения, основанный на применении ABC.
'''



